; hello-world.sta

; Memory map
; 0x0000 - 0x1000: reserved
; 0x1000 - 0x2000: IO
; 0x2000 - 0x3000: interrupt
; 0x3000 - 0x4000: program
; 0x4000 - 0x5000: stack
; 0x5000 - 0x6000: static

;
; Definitions
;
.define STATIC_ADDR  0x5000
.define STACK_BOTTOM 0x5000
.define STACK_LIMIT  0x4000

;
; Instruction section
;
.section $INIT_PC_VAL
	setsbp $STACK_BOTTOM
	setsfp $STACK_BOTTOM
	setsp  $STACK_BOTTOM
	setslp $STACK_LIMIT
	rjmpi8 :main

;
; Write buffer to constant IO address
;
:write_io ; ioa64, bufa64, lenu64
	push64 24
	loadpopsfp64 ; bufa64
	push64 32
	loadpopsfp64 ; bufa64, lenu64
	add64        ; enda64
	push64 24
	loadpopsfp64 ; enda64, bufa64
:write_io_loop
	dup64        ; enda64, bufa64, bufa64
	push64 -8
	loadpopsfp64 ; enda64, bufa64, bufa64, enda64
	cltu64       ; enda64, bufa64, bufa64 < enda64
	brz64 :write_io_end
	load8        ; enda64, bufa64, data8
	push64 16
	loadpopsfp64 ; enda64, bufa64, data8, ioa64
	storerpop8   ; *ioa64 = data8
	pop8         ; enda64, bufa64
	push64 1
	add64        ; enda64, bufa64 + 1
	rjmpi8 :write_io_loop
:write_io_end
	ret

;
; Main program
;
:main
	push64 13
	push64 "Hello world!\n"
	push64 $IO_STDOUT_ADDR
	call :write_io
	pop64
	pop64
	pop64
	halt 0

;
; Static data section
;
.section $STATIC_ADDR
.strings
