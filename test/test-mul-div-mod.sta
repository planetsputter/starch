; test-mul-div-mod.sta

.include "sys.sta"

; Memory map
; 0x1000 - 0x2000: IO
; 0x2000 - 0x3000: program
; 0x3000 - 0x4000: stack
; 0x4000 - 0x5000: static

;
; Definitions
;
.define STATIC_ADDR 0x4000
.define MAX_REPS 16

;
; Static data section
;
.section $STATIC_ADDR

.data64 0 ; rep64

;
; Instruction section
;
.section $INIT_PC_VAL

setsbp 0x4000
setsfp 0x4000
setsp  0x4000
setslp 0x3000

:begin
push64 $STATIC_ADDR
loadpop64        ; rep64
dup64            ; rep64, rep64
push64 $MAX_REPS ; rep64, rep64, $MAX_REPS
cltu64           ; rep64, rep64 < $MAX_REPS
brz64 :end       ; rep64
call :test_mul8_div8_mod8
call :test_mul16_div16_mod16
call :test_mul32_div32_mod32
call :test_mul64_div64_mod64
push64 1         ; rep64, 1_64
add64            ; rep64 + 1_64
push64 $STATIC_ADDR
storerpop64
pop64
rjmpi8 :begin
:end
halt 0

;
;test_mul8_div8_mod8
;
:test_mul8_div8_mod8

; Test that mul8 has a one identity
push64 $URAND_ADDR
loadpop8    ; a8
dup8        ; a8, a8
dup8        ; a8, a8, a8
push8 1     ; a8, a8, a8, 1_8
mul8        ; a8, a8, a8 * 1_8
ceq8        ; a8, a8 == a8 * 1_8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == a8 * 1_8)
pop8        ; a8

; Test that mul8 has a zero of zero
dup8        ; a8, a8
push8 0     ; a8, a8, 0_8
mul8        ; a8, a8 * 0_8
push8 0     ; a8, a8 * 0_8, 0_8
ceq8        ; a8, a8 * 0_8 == 0_8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 * 0_8 == 0_8)
pop8        ; a8

; Test that divu8 has a one identity
dup8        ; a8, a8
dup8        ; a8, a8, a8
push8 1     ; a8, a8, a8, 1_8
divu8       ; a8, a8, au8 / 1_8
ceq8        ; a8, a8 == au8 / 1_8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == au8 / 1_8)
pop8        ; a8

; Test that divi8 has a one identity
dup8        ; a8, a8
dup8        ; a8, a8, a8
push8 1     ; a8, a8, a8, 1_8
divi8       ; a8, a8, ai8 / 1_8
ceq8        ; a8, a8 == ai8 / 1_8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == ai8 / 1_8)
pop8        ; a8

; Test that modu8 has a zero of one
dup8        ; a8, a8
push8 1     ; a8, a8, 1_8
modu8       ; a8, au8 % 1_8
push8 0     ; a8, au8 % 1_8, 0
ceq8        ; a8, au8 % 1_8 == 0
push64 $ASSERT_ADDR
storerpop8  ; assert(au8 % 1_8 == 0)
pop8        ; a8

; Test that modi8 has a zero of one
dup8        ; a8, a8
push8 1     ; a8, a8, 1_8
modi8       ; a8, ai8 % 1_8
push8 0     ; a8, ai8 % 1_8, 0
ceq8        ; a8, ai8 % 1_8 == 0
push64 $ASSERT_ADDR
storerpop8  ; assert(ai8 % 1_8 == 0)
pop8        ; a8

; Test that mul8 is commutative
push64 $URAND_ADDR
loadpop8    ; a8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, b8
mul8        ; a8, b8, a8 * b8
push64 -2
loadpopsfp8 ; a8, b8, a8 * b8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8 * b8, b8, a8
mul8        ; a8, b8, a8 * b8, b8 * a8
ceq8        ; a8, b8, a8 * b8 == b8 * a8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 * b8 == b8 * a8)
pop8        ; a8, b8

; Ensure that b8 is not zero
dup8        ; a8, b8, b8
push8 0     ; a8, b8, b8, 0_8
ceq8        ; a8, b8, b8 == 0_8
rbrz8i8 :test_div8_mod8 ; a8, b8
pop8        ; a8
push8 1     ; a8, 1_8

:test_div8_mod8
; Test that au8 / bu8 * b8 + au8 % bu8 == a8
push64 -1
loadpopsfp8 ; a8, b8, a8
dup8        ; a8, b8, a8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, a8, b8
divu8       ; a8, b8, a8, au8 / bu8
push64 -2
loadpopsfp8 ; a8, b8, a8, au8 / bu8, b8
mul8        ; a8, b8, a8, au8 / bu8 * b8
push64 -1
loadpopsfp8 ; a8, b8, a8, au8 / bu8 * b8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, au8 / bu8 * b8, a8, b8
modu8       ; a8, b8, a8, au8 / bu8 * b8, au8 % bu8
add8        ; a8, b8, a8, au8 / bu8 * b8 + au8 % bu8
ceq8        ; a8, b8, a8 == au8 / bu8 * b8 + au8 % bu8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == au8 / bu8 * b8 + au8 % bu8)
pop8        ; a8, b8

; Test that ai8 / bi8 * b8 + ai8 % bi8 == a8
push64 -1
loadpopsfp8 ; a8, b8, a8
dup8        ; a8, b8, a8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, a8, b8
divi8       ; a8, b8, a8, ai8 / bi8
push64 -2
loadpopsfp8 ; a8, b8, a8, ai8 / bi8, b8
mul8        ; a8, b8, a8, ai8 / bi8 * b8
push64 -1
loadpopsfp8 ; a8, b8, a8, ai8 / bi8 * b8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, ai8 / bi8 * b8, a8, b8
modi8       ; a8, b8, a8, ai8 / bi8 * b8, ai8 % bi8
add8        ; a8, b8, a8, ai8 / bi8 * b8 + ai8 % bi8
ceq8        ; a8, b8, a8 == ai8 / bi8 * b8 + ai8 % bi8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == ai8 / bi8 * b8 + ai8 % bi8)
pop8        ; a8, b8

; Test that au8 / bu8 * b8 + au8 % bu8 == a8 using reversed operations
push64 -1
loadpopsfp8 ; a8, b8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8, b8, a8
divru8      ; a8, b8, a8, au8 / bu8
push64 -2
loadpopsfp8 ; a8, b8, a8, au8 / bu8, b8
mul8        ; a8, b8, a8, au8 / bu8 * b8
push64 -2
loadpopsfp8 ; a8, b8, a8, au8 / bu8 * b8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8, au8 / bu8 * b8, b8, a8
modru8      ; a8, b8, a8, au8 / bu8 * b8, au8 % bu8
add8        ; a8, b8, a8, au8 / bu8 * b8 + au8 % bu8
ceq8        ; a8, b8, a8 == au8 / bu8 * b8 + au8 % bu8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == au8 / bu8 * b8 + au8 % bu8)
pop8        ; a8, b8

; Test that ai8 / bi8 * b8 + ai8 % bi8 == a8 using reversed operations
push64 -1
loadpopsfp8 ; a8, b8, a8
push64 -2
loadpopsfp8 ; a8, b8, a8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8, b8, a8
divri8      ; a8, b8, a8, ai8 / bi8
push64 -2
loadpopsfp8 ; a8, b8, a8, ai8 / bi8, b8
mul8        ; a8, b8, a8, ai8 / bi8 * b8
push64 -2
loadpopsfp8 ; a8, b8, a8, ai8 / bi8 * b8, b8
push64 -1
loadpopsfp8 ; a8, b8, a8, ai8 / bi8 * b8, b8, a8
modri8      ; a8, b8, a8, ai8 / bi8 * b8, ai8 % bi8
add8        ; a8, b8, a8, ai8 / bi8 * b8 + ai8 % bi8
ceq8        ; a8, b8, a8 == ai8 / bi8 * b8 + ai8 % bi8
push64 $ASSERT_ADDR
storerpop8  ; assert(a8 == ai8 / bi8 * b8 + ai8 % bi8)
pop8        ; a8, b8

ret ; test_mul8_div8_mod8

;
; test_mul16_div16_mod16
;
:test_mul16_div16_mod16

; Test that mul16 has a one identity
push64 $URAND_ADDR
loadpop16    ; a16
dup16        ; a16, a16
dup16        ; a16, a16, a16
push16 1     ; a16, a16, a16, 1_16
mul16        ; a16, a16, a16 * 1_16
ceq16        ; a16, a16 == a16 * 1_16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == a16 * 1_16)
pop16        ; a16

; Test that mul16 has a zero of zero
dup16        ; a16, a16
push16 0     ; a16, a16, 0_16
mul16        ; a16, a16 * 0_16
push16 0     ; a16, a16 * 0_16, 0_16
ceq16        ; a16, a16 * 0_16 == 0_16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 * 0_16 == 0_16)
pop16        ; a16

; Test that divu16 has a one identity
dup16        ; a16, a16
dup16        ; a16, a16, a16
push16 1     ; a16, a16, a16, 1_16
divu16       ; a16, a16, au16 / 1_16
ceq16        ; a16, a16 == au16 / 1_16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == au16 / 1_16)
pop16        ; a16

; Test that divi16 has a one identity
dup16        ; a16, a16
dup16        ; a16, a16, a16
push16 1     ; a16, a16, a16, 1_16
divi16       ; a16, a16, ai16 / 1_16
ceq16        ; a16, a16 == ai16 / 1_16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == ai16 / 1_16)
pop16        ; a16

; Test that modu16 has a zero of one
dup16        ; a16, a16
push16 1     ; a16, a16, 1_16
modu16       ; a16, au16 % 1_16
push16 0     ; a16, au16 % 1_16, 0
ceq16        ; a16, au16 % 1_16 == 0
push64 $ASSERT_ADDR
storerpop16  ; assert(au16 % 1_16 == 0)
pop16        ; a16

; Test that modi16 has a zero of one
dup16        ; a16, a16
push16 1     ; a16, a16, 1_16
modi16       ; a16, ai16 % 1_16
push16 0     ; a16, ai16 % 1_16, 0
ceq16        ; a16, ai16 % 1_16 == 0
push64 $ASSERT_ADDR
storerpop16  ; assert(ai16 % 1_16 == 0)
pop16        ; a16

; Test that mul16 is commutative
push64 $URAND_ADDR
loadpop16    ; a16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, b16
mul16        ; a16, b16, a16 * b16
push64 -4
loadpopsfp16 ; a16, b16, a16 * b16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16 * b16, b16, a16
mul16        ; a16, b16, a16 * b16, b16 * a16
ceq16        ; a16, b16, a16 * b16 == b16 * a16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 * b16 == b16 * a16)
pop16        ; a16, b16

; Ensure that b16 is not zero
dup16        ; a16, b16, b16
push16 0     ; a16, b16, b16, 0_16
ceq16        ; a16, b16, b16 == 0_16
rbrz16i8 :test_div16_mod16 ; a16, b16
pop16        ; a16
push16 1     ; a16, 1_16

:test_div16_mod16
; Test that au16 / bu16 * b16 + au16 % bu16 == a16
push64 -2
loadpopsfp16 ; a16, b16, a16
dup16        ; a16, b16, a16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, a16, b16
divu16       ; a16, b16, a16, au16 / bu16
push64 -4
loadpopsfp16 ; a16, b16, a16, au16 / bu16, b16
mul16        ; a16, b16, a16, au16 / bu16 * b16
push64 -2
loadpopsfp16 ; a16, b16, a16, au16 / bu16 * b16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, au16 / bu16 * b16, a16, b16
modu16       ; a16, b16, a16, au16 / bu16 * b16, au16 % bu16
add16        ; a16, b16, a16, au16 / bu16 * b16 + au16 % bu16
ceq16        ; a16, b16, a16 == au16 / bu16 * b16 + au16 % bu16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == au16 / bu16 * b16 + au16 % bu16)
pop16        ; a16, b16

; Test that ai16 / bi16 * b16 + ai16 % bi16 == a16
push64 -2
loadpopsfp16 ; a16, b16, a16
dup16        ; a16, b16, a16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, a16, b16
divi16       ; a16, b16, a16, ai16 / bi16
push64 -4
loadpopsfp16 ; a16, b16, a16, ai16 / bi16, b16
mul16        ; a16, b16, a16, ai16 / bi16 * b16
push64 -2
loadpopsfp16 ; a16, b16, a16, ai16 / bi16 * b16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, ai16 / bi16 * b16, a16, b16
modi16       ; a16, b16, a16, ai16 / bi16 * b16, ai16 % bi16
add16        ; a16, b16, a16, ai16 / bi16 * b16 + ai16 % bi16
ceq16        ; a16, b16, a16 == ai16 / bi16 * b16 + ai16 % bi16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == ai16 / bi16 * b16 + ai16 % bi16)
pop16        ; a16, b16

; Test that au16 / bu16 * b16 + au16 % bu16 == a16 using reversed operations
push64 -2
loadpopsfp16 ; a16, b16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16, b16, a16
divru16      ; a16, b16, a16, au16 / bu16
push64 -4
loadpopsfp16 ; a16, b16, a16, au16 / bu16, b16
mul16        ; a16, b16, a16, au16 / bu16 * b16
push64 -4
loadpopsfp16 ; a16, b16, a16, au16 / bu16 * b16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16, au16 / bu16 * b16, b16, a16
modru16      ; a16, b16, a16, au16 / bu16 * b16, au16 % bu16
add16        ; a16, b16, a16, au16 / bu16 * b16 + au16 % bu16
ceq16        ; a16, b16, a16 == au16 / bu16 * b16 + au16 % bu16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == au16 / bu16 * b16 + au16 % bu16)
pop16        ; a16, b16

; Test that ai16 / bi16 * b16 + ai16 % bi16 == a16 using reversed operations
push64 -2
loadpopsfp16 ; a16, b16, a16
push64 -4
loadpopsfp16 ; a16, b16, a16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16, b16, a16
divri16      ; a16, b16, a16, ai16 / bi16
push64 -4
loadpopsfp16 ; a16, b16, a16, ai16 / bi16, b16
mul16        ; a16, b16, a16, ai16 / bi16 * b16
push64 -4
loadpopsfp16 ; a16, b16, a16, ai16 / bi16 * b16, b16
push64 -2
loadpopsfp16 ; a16, b16, a16, ai16 / bi16 * b16, b16, a16
modri16      ; a16, b16, a16, ai16 / bi16 * b16, ai16 % bi16
add16        ; a16, b16, a16, ai16 / bi16 * b16 + ai16 % bi16
ceq16        ; a16, b16, a16 == ai16 / bi16 * b16 + ai16 % bi16
push64 $ASSERT_ADDR
storerpop16  ; assert(a16 == ai16 / bi16 * b16 + ai16 % bi16)
pop16        ; a16, b16

ret ; test_mul16_div16_mod16

;
; test_mul32_div32_mod32
;
:test_mul32_div32_mod32

; Test that mul32 has a one identity
push64 $URAND_ADDR
loadpop32    ; a32
dup32        ; a32, a32
dup32        ; a32, a32, a32
push32 1     ; a32, a32, a32, 1_32
mul32        ; a32, a32, a32 * 1_32
ceq32        ; a32, a32 == a32 * 1_32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == a32 * 1_32)
pop32        ; a32

; Test that mul32 has a zero of zero
dup32        ; a32, a32
push32 0     ; a32, a32, 0_32
mul32        ; a32, a32 * 0_32
push32 0     ; a32, a32 * 0_32, 0_32
ceq32        ; a32, a32 * 0_32 == 0_32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 * 0_32 == 0_32)
pop32        ; a32

; Test that divu32 has a one identity
dup32        ; a32, a32
dup32        ; a32, a32, a32
push32 1     ; a32, a32, a32, 1_32
divu32       ; a32, a32, au32 / 1_32
ceq32        ; a32, a32 == au32 / 1_32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == au32 / 1_32)
pop32        ; a32

; Test that divi32 has a one identity
dup32        ; a32, a32
dup32        ; a32, a32, a32
push32 1     ; a32, a32, a32, 1_32
divi32       ; a32, a32, ai32 / 1_32
ceq32        ; a32, a32 == ai32 / 1_32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == ai32 / 1_32)
pop32        ; a32

; Test that modu32 has a zero of one
dup32        ; a32, a32
push32 1     ; a32, a32, 1_32
modu32       ; a32, au32 % 1_32
push32 0     ; a32, au32 % 1_32, 0
ceq32        ; a32, au32 % 1_32 == 0
push64 $ASSERT_ADDR
storerpop32  ; assert(au32 % 1_32 == 0)
pop32        ; a32

; Test that modi32 has a zero of one
dup32        ; a32, a32
push32 1     ; a32, a32, 1_32
modi32       ; a32, ai32 % 1_32
push32 0     ; a32, ai32 % 1_32, 0
ceq32        ; a32, ai32 % 1_32 == 0
push64 $ASSERT_ADDR
storerpop32  ; assert(ai32 % 1_32 == 0)
pop32        ; a32

; Test that mul32 is commutative
push64 $URAND_ADDR
loadpop32    ; a32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, b32
mul32        ; a32, b32, a32 * b32
push64 -8
loadpopsfp32 ; a32, b32, a32 * b32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32 * b32, b32, a32
mul32        ; a32, b32, a32 * b32, b32 * a32
ceq32        ; a32, b32, a32 * b32 == b32 * a32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 * b32 == b32 * a32)
pop32        ; a32, b32

; Ensure that b32 is not zero
dup32        ; a32, b32, b32
push32 0     ; a32, b32, b32, 0_32
ceq32        ; a32, b32, b32 == 0_32
rbrz32i8 :test_div32_mod32 ; a32, b32
pop32        ; a32
push32 1     ; a32, 1_32

:test_div32_mod32
; Test that au32 / bu32 * b32 + au32 % bu32 == a32
push64 -4
loadpopsfp32 ; a32, b32, a32
dup32        ; a32, b32, a32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, a32, b32
divu32       ; a32, b32, a32, au32 / bu32
push64 -8
loadpopsfp32 ; a32, b32, a32, au32 / bu32, b32
mul32        ; a32, b32, a32, au32 / bu32 * b32
push64 -4
loadpopsfp32 ; a32, b32, a32, au32 / bu32 * b32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, au32 / bu32 * b32, a32, b32
modu32       ; a32, b32, a32, au32 / bu32 * b32, au32 % bu32
add32        ; a32, b32, a32, au32 / bu32 * b32 + au32 % bu32
ceq32        ; a32, b32, a32 == au32 / bu32 * b32 + au32 % bu32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == au32 / bu32 * b32 + au32 % bu32)
pop32        ; a32, b32

; Test that ai32 / bi32 * b32 + ai32 % bi32 == a32
push64 -4
loadpopsfp32 ; a32, b32, a32
dup32        ; a32, b32, a32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, a32, b32
divi32       ; a32, b32, a32, ai32 / bi32
push64 -8
loadpopsfp32 ; a32, b32, a32, ai32 / bi32, b32
mul32        ; a32, b32, a32, ai32 / bi32 * b32
push64 -4
loadpopsfp32 ; a32, b32, a32, ai32 / bi32 * b32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, ai32 / bi32 * b32, a32, b32
modi32       ; a32, b32, a32, ai32 / bi32 * b32, ai32 % bi32
add32        ; a32, b32, a32, ai32 / bi32 * b32 + ai32 % bi32
ceq32        ; a32, b32, a32 == ai32 / bi32 * b32 + ai32 % bi32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == ai32 / bi32 * b32 + ai32 % bi32)
pop32        ; a32, b32

; Test that au32 / bu32 * b32 + au32 % bu32 == a32 using reversed operations
push64 -4
loadpopsfp32 ; a32, b32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32, b32, a32
divru32      ; a32, b32, a32, au32 / bu32
push64 -8
loadpopsfp32 ; a32, b32, a32, au32 / bu32, b32
mul32        ; a32, b32, a32, au32 / bu32 * b32
push64 -8
loadpopsfp32 ; a32, b32, a32, au32 / bu32 * b32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32, au32 / bu32 * b32, b32, a32
modru32      ; a32, b32, a32, au32 / bu32 * b32, au32 % bu32
add32        ; a32, b32, a32, au32 / bu32 * b32 + au32 % bu32
ceq32        ; a32, b32, a32 == au32 / bu32 * b32 + au32 % bu32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == au32 / bu32 * b32 + au32 % bu32)
pop32        ; a32, b32

; Test that ai32 / bi32 * b32 + ai32 % bi32 == a32 using reversed operations
push64 -4
loadpopsfp32 ; a32, b32, a32
push64 -8
loadpopsfp32 ; a32, b32, a32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32, b32, a32
divri32      ; a32, b32, a32, ai32 / bi32
push64 -8
loadpopsfp32 ; a32, b32, a32, ai32 / bi32, b32
mul32        ; a32, b32, a32, ai32 / bi32 * b32
push64 -8
loadpopsfp32 ; a32, b32, a32, ai32 / bi32 * b32, b32
push64 -4
loadpopsfp32 ; a32, b32, a32, ai32 / bi32 * b32, b32, a32
modri32      ; a32, b32, a32, ai32 / bi32 * b32, ai32 % bi32
add32        ; a32, b32, a32, ai32 / bi32 * b32 + ai32 % bi32
ceq32        ; a32, b32, a32 == ai32 / bi32 * b32 + ai32 % bi32
push64 $ASSERT_ADDR
storerpop32  ; assert(a32 == ai32 / bi32 * b32 + ai32 % bi32)
pop32        ; a32, b32

ret ; test_mul32_div32_mod32

;
; test_mul64_div64_mod64
;
:test_mul64_div64_mod64

; Test that mul64 has a one identity
push64 $URAND_ADDR
loadpop64    ; a64
dup64        ; a64, a64
dup64        ; a64, a64, a64
push64 1     ; a64, a64, a64, 1_64
mul64        ; a64, a64, a64 * 1_64
ceq64        ; a64, a64 == a64 * 1_64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == a64 * 1_64)
pop64        ; a64

; Test that mul64 has a zero of zero
dup64        ; a64, a64
push64 0     ; a64, a64, 0_64
mul64        ; a64, a64 * 0_64
push64 0     ; a64, a64 * 0_64, 0_64
ceq64        ; a64, a64 * 0_64 == 0_64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 * 0_64 == 0_64)
pop64        ; a64

; Test that divu64 has a one identity
dup64        ; a64, a64
dup64        ; a64, a64, a64
push64 1     ; a64, a64, a64, 1_64
divu64       ; a64, a64, au64 / 1_64
ceq64        ; a64, a64 == au64 / 1_64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == au64 / 1_64)
pop64        ; a64

; Test that divi64 has a one identity
dup64        ; a64, a64
dup64        ; a64, a64, a64
push64 1     ; a64, a64, a64, 1_64
divi64       ; a64, a64, ai64 / 1_64
ceq64        ; a64, a64 == ai64 / 1_64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == ai64 / 1_64)
pop64        ; a64

; Test that modu64 has a zero of one
dup64        ; a64, a64
push64 1     ; a64, a64, 1_64
modu64       ; a64, au64 % 1_64
push64 0     ; a64, au64 % 1_64, 0
ceq64        ; a64, au64 % 1_64 == 0
push64 $ASSERT_ADDR
storerpop64  ; assert(au64 % 1_64 == 0)
pop64        ; a64

; Test that modi64 has a zero of one
dup64        ; a64, a64
push64 1     ; a64, a64, 1_64
modi64       ; a64, ai64 % 1_64
push64 0     ; a64, ai64 % 1_64, 0
ceq64        ; a64, ai64 % 1_64 == 0
push64 $ASSERT_ADDR
storerpop64  ; assert(ai64 % 1_64 == 0)
pop64        ; a64

; Test that mul64 is commutative
push64 $URAND_ADDR
loadpop64    ; a64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, b64
mul64        ; a64, b64, a64 * b64
push64 -16
loadpopsfp64 ; a64, b64, a64 * b64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64 * b64, b64, a64
mul64        ; a64, b64, a64 * b64, b64 * a64
ceq64        ; a64, b64, a64 * b64 == b64 * a64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 * b64 == b64 * a64)
pop64        ; a64, b64

; Ensure that b64 is not zero
dup64        ; a64, b64, b64
push64 0     ; a64, b64, b64, 0_64
ceq64        ; a64, b64, b64 == 0_64
rbrz64i8 :test_div64_mod64 ; a64, b64
pop64        ; a64
push64 1     ; a64, 1_64

:test_div64_mod64
; Test that au64 / bu64 * b64 + au64 % bu64 == a64
push64 -8
loadpopsfp64 ; a64, b64, a64
dup64        ; a64, b64, a64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, a64, b64
divu64       ; a64, b64, a64, au64 / bu64
push64 -16
loadpopsfp64 ; a64, b64, a64, au64 / bu64, b64
mul64        ; a64, b64, a64, au64 / bu64 * b64
push64 -8
loadpopsfp64 ; a64, b64, a64, au64 / bu64 * b64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, au64 / bu64 * b64, a64, b64
modu64       ; a64, b64, a64, au64 / bu64 * b64, au64 % bu64
add64        ; a64, b64, a64, au64 / bu64 * b64 + au64 % bu64
ceq64        ; a64, b64, a64 == au64 / bu64 * b64 + au64 % bu64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == au64 / bu64 * b64 + au64 % bu64)
pop64        ; a64, b64

; Test that ai64 / bi64 * b64 + ai64 % bi64 == a64
push64 -8
loadpopsfp64 ; a64, b64, a64
dup64        ; a64, b64, a64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, a64, b64
divi64       ; a64, b64, a64, ai64 / bi64
push64 -16
loadpopsfp64 ; a64, b64, a64, ai64 / bi64, b64
mul64        ; a64, b64, a64, ai64 / bi64 * b64
push64 -8
loadpopsfp64 ; a64, b64, a64, ai64 / bi64 * b64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, ai64 / bi64 * b64, a64, b64
modi64       ; a64, b64, a64, ai64 / bi64 * b64, ai64 % bi64
add64        ; a64, b64, a64, ai64 / bi64 * b64 + ai64 % bi64
ceq64        ; a64, b64, a64 == ai64 / bi64 * b64 + ai64 % bi64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == ai64 / bi64 * b64 + ai64 % bi64)
pop64        ; a64, b64

; Test that au64 / bu64 * b64 + au64 % bu64 == a64 using reversed operations
push64 -8
loadpopsfp64 ; a64, b64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64, b64, a64
divru64      ; a64, b64, a64, au64 / bu64
push64 -16
loadpopsfp64 ; a64, b64, a64, au64 / bu64, b64
mul64        ; a64, b64, a64, au64 / bu64 * b64
push64 -16
loadpopsfp64 ; a64, b64, a64, au64 / bu64 * b64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64, au64 / bu64 * b64, b64, a64
modru64      ; a64, b64, a64, au64 / bu64 * b64, au64 % bu64
add64        ; a64, b64, a64, au64 / bu64 * b64 + au64 % bu64
ceq64        ; a64, b64, a64 == au64 / bu64 * b64 + au64 % bu64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == au64 / bu64 * b64 + au64 % bu64)
pop64        ; a64, b64

; Test that ai64 / bi64 * b64 + ai64 % bi64 == a64 using reversed operations
push64 -8
loadpopsfp64 ; a64, b64, a64
push64 -16
loadpopsfp64 ; a64, b64, a64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64, b64, a64
divri64      ; a64, b64, a64, ai64 / bi64
push64 -16
loadpopsfp64 ; a64, b64, a64, ai64 / bi64, b64
mul64        ; a64, b64, a64, ai64 / bi64 * b64
push64 -16
loadpopsfp64 ; a64, b64, a64, ai64 / bi64 * b64, b64
push64 -8
loadpopsfp64 ; a64, b64, a64, ai64 / bi64 * b64, b64, a64
modri64      ; a64, b64, a64, ai64 / bi64 * b64, ai64 % bi64
add64        ; a64, b64, a64, ai64 / bi64 * b64 + ai64 % bi64
ceq64        ; a64, b64, a64 == ai64 / bi64 * b64 + ai64 % bi64
push64 $ASSERT_ADDR
storerpop64  ; assert(a64 == ai64 / bi64 * b64 + ai64 % bi64)
pop64        ; a64, b64

ret ; test_mul64_div64_mod64
